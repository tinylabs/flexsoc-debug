/**
 *  Target wrapper to access specific CSRs from com link. This is a very thin
 *  layer to wrap the autogenerated csr classes + native comm layer.
 *
 *  All rights reserved.
 *  Tiny Labs Inc
 *  2020
 */
#ifndef TARGET_H
#define TARGET_H

#include <stdint.h>
#include <stdlib.h>

#include "flexdbg_csr.h"


// Remote stat enum
typedef enum
  {
   SUCCESS       = 0,
   ERR_FAULT     = 1,
   ERR_TIMEOUT   = 2,
   ERR_NOCONNECT = 3,
   ERR_PARITY    = 4,
   ERR_NOMEMAP   = 5,
   ERR_UNSUPSZ   = 6,
   ERR_UNKNOWN   = 7,
  } remote_stat_t;

class Target {

  static Target *inst;

private:
  flexdbg_csr *csr;
  Target (char *id);
  
 public:

  // Get singleton instance
  static Target *Ptr (void);
  static Target *Ptr (char *id);

  // Destructor
  virtual ~Target ();

  // General APIs
  void ReadW (uint32_t addr, uint32_t *data, uint32_t cnt);
  void ReadH (uint32_t addr, uint16_t *data, uint32_t cnt);
  void ReadB (uint32_t addr, uint8_t *data, uint32_t cnt);
  void WriteW (uint32_t addr, const uint32_t *data, uint32_t cnt);
  void WriteH (uint32_t addr, const uint16_t *data, uint32_t cnt);
  void WriteB (uint32_t addr, const uint8_t *data, uint32_t cnt);
  uint32_t ReadReg (uint32_t addr);
  void WriteReg (uint32_t addr, uint32_t val);

  // Access CSRs
  uint32_t FlexsocID (void);
};

#endif /* TARGET_H */


